{"version":3,"sources":["component/FeedbackOption/FeedbackOption.js","component/Section/Section.js","component/Statistic/Statistic.js","component/Container/Container.js","component/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","map","option","type","className","onClick","Section","title","children","Statistic","good","neutral","bad","total","positivePercentage","Container","Notification","message","App","state","addFeedback","setState","countTotalFeedback","Object","values","reduce","acc","countPositiveFeedbackPercentage","Math","round","this","FeedbackOption","keys","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+UAyBeA,G,MAnBO,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAChC,OAAOD,EAAQE,KAAI,SAAAC,GAAM,OACvB,wBACEC,KAAK,SACLC,UAAU,MAEVC,QAAS,kBAAML,EAAgBE,IAJjC,SAMGA,GAHIA,QCOII,EAfD,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SACtB,OACE,0BAASJ,UAAU,UAAnB,UACE,oBAAIA,UAAU,QAAd,SAAuBG,IACtBC,MCaQC,G,MAhBG,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC9C,OACE,+BACE,qBAAIV,UAAU,OAAd,mBAA4BM,KAC5B,qBAAIN,UAAU,OAAd,sBAA+BO,KAC/B,qBAAIP,UAAU,OAAd,kBAA2BQ,KAC3B,qBAAIR,UAAU,OAAd,oBAA6BS,KAC7B,qBAAIT,UAAU,OAAd,gCAAyCU,EAAzC,YCCSC,G,MARG,SAAC,GAAkB,IAAhBP,EAAe,EAAfA,SACnB,OAAO,qBAAKJ,UAAU,YAAf,SAA4BI,MCMtBQ,G,MARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,mBAAGb,UAAU,UAAb,SAAwBa,MCuDlBC,E,4MAjDbC,MAAQ,CACNT,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPQ,YAAc,SAAAlB,GACZ,EAAKmB,UAAS,SAAAF,GAAK,sBAChBjB,EAASiB,EAAMjB,GAAU,O,EAI9BoB,mBAAqB,WACnB,OAAOC,OAAOC,OAAO,EAAKL,OAAOM,QAAO,SAACC,EAAKxB,GAAN,OAAiBwB,EAAMxB,IAAQ,I,EAGzEyB,gCAAkC,WAAO,IAC/BjB,EAAS,EAAKS,MAAdT,KACR,OAAOkB,KAAKC,MAAOnB,EAAO,EAAKY,qBAAwB,MAAQ,G,uDAGvD,IAAD,EACwBQ,KAAKX,MAA5BT,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACvB,OACE,eAAC,EAAD,WACE,cAAC,EAAD,CAASL,MAAM,wBAAf,SACE,cAACwB,EAAD,CACEhC,QAASwB,OAAOS,KAAKF,KAAKX,OAC1BnB,gBAAiB8B,KAAKV,gBAG1B,cAAC,EAAD,CAASb,MAAM,aAAf,SACGuB,KAAKR,qBACJ,cAAC,EAAD,CACEZ,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOiB,KAAKR,qBACZR,mBAAoBgB,KAAKH,oCAG3B,cAAC,EAAD,CAAcV,QAAQ,+B,GA1ChBgB,aCGHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4231eab8.chunk.js","sourcesContent":["  \r\nimport React from 'react';\r\nimport '../FeedbackOption/FeedbackOptions.css';\r\nimport T from 'prop-types';\r\n\r\n\r\nconst FeedbackOptions=({ options, onLeaveFeedback }) => {\r\n  return options.map(option => (\r\n    <button\r\n      type=\"button\"\r\n      className='btn'\r\n      key={option}\r\n      onClick={() => onLeaveFeedback(option)}\r\n    >\r\n      {option}\r\n    </button>\r\n  ));\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: T.arrayOf(T.string.isRequired),\r\n  onLeaveFeedback: T.func.isRequired,\r\n};\r\n\r\n\r\nexport default FeedbackOptions;\r\n\r\n","import T from 'prop-types';\r\n\r\n\r\nconst Section=({ title, children })=> {\r\n  return (\r\n    <section className=\"section\">\r\n      <h2 className=\"title\">{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\n\r\nSection.propTypes = {\r\n  title: T.string.isRequired,\r\n  children: T.node.isRequired,\r\n};\r\n\r\nexport default Section;","import React from 'react';\r\nimport T from 'prop-types';\r\nimport '../Statistic/Statistic.css';\r\n\r\nconst Statistic = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <ul>\r\n      <li className=\"text\">Good: {good}</li>\r\n      <li className=\"text\">Neutral: {neutral}</li>\r\n      <li className=\"text\">Bad: {bad}</li>\r\n      <li className=\"text\">Total: {total}</li>\r\n      <li className=\"text\">Positive feedback: {positivePercentage}%</li>\r\n    </ul>\r\n  );\r\n  }\r\n\r\nStatistic.propTypes = {\r\n  label: T.string.isRequired,\r\n  value: T.number.isRequired,\r\n};\r\nexport default Statistic;","  \r\nimport T from 'prop-types';\r\nimport '../Container/Container.css'\r\n\r\nconst Container = ({ children }) => {\r\n  return <div className=\"container\">{children}</div>;\r\n}\r\n\r\nContainer.propTypes = {\r\n  children: T.node.isRequired,\r\n};\r\n\r\nexport default Container;","import T from 'prop-types';\r\nimport '../Notification/Notification.css';\r\n\r\nconst Notification = ({ message }) => {\r\n  return <p className=\"message\">{message}</p>;\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: T.string.isRequired,\r\n};\r\n\r\nexport default Notification;","import FeedbackOptions from './component/FeedbackOption/FeedbackOption'\r\nimport Section from './component/Section/Section'\r\nimport { Component } from 'react';\r\nimport Statistic from './component/Statistic/Statistic'\r\nimport Container from './component/Container/Container'\r\nimport Notification from './component/Notification/Notification'\r\n\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  addFeedback = option => {\r\n    this.setState(state => ({\r\n      [option]: state[option] + 1,\r\n    }));\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    return Object.values(this.state).reduce((acc, option) => acc + option, 0);\r\n  };\r\n\r\n  countPositiveFeedbackPercentage = () => {\r\n    const { good } = this.state;\r\n    return Math.round((good / this.countTotalFeedback()) * 100) || 0;\r\n  };\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    return (\r\n      <Container>\r\n        <Section title=\"Please leave feedback\">\r\n          <FeedbackOptions\r\n            options={Object.keys(this.state)}\r\n            onLeaveFeedback={this.addFeedback}\r\n          />\r\n        </Section>\r\n        <Section title=\"Statistics\">\r\n          {this.countTotalFeedback() ? (\r\n            <Statistic\r\n              good={good}\r\n              neutral={neutral}\r\n              bad={bad}\r\n              total={this.countTotalFeedback()}\r\n              positivePercentage={this.countPositiveFeedbackPercentage()}\r\n            ></Statistic>\r\n          ) : (\r\n            <Notification message=\"No feedback given\" />\r\n          )}\r\n        </Section>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}